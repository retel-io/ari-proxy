akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  log-dead-letters-during-shutdown = false

  http {
    client {
      user-agent-header = ari-proxy
      idle-timeout = 60s # the default

      websocket {
        periodic-keep-alive-mode = ping
        periodic-keep-alive-max-idle = 10s
      }
    }
  }
}

service {
  name = "test-proxy"
  stasis-app = "test-app"
  websocket-uri = "ws://localhost:8088/ari/events?app=test-app&api_key=asterisk:asterisk"
  httpport = 9000

  rest {
    user = "asterisk"
    password = "asterisk"
    uri = "http://localhost:8088"
  }

  kafka {
    bootstrap-servers = "localhost:9092"
    consumer-group = "consumerGroup"
    commands-topic = "commandsTopic"
    events-and-responses-topic = "eventsAndResponsesTopic"
  }

  sqlite {
      url = "jdbc:sqlite::memory:"
      ttl = 1s
  }

  redis {
      ttl = 1s
  }

  persistence-store = "io.retel.ariproxy.persistence.plugin.InMemoryPersistenceStore"

  metrics {
    healthReportTimeout = 100ms
  	measurement-names {
  		backing-service-availability = "backing_service.availability"
  	}
  	common-tags {
  	 hostname = "localhost"
  	}
  }
}
